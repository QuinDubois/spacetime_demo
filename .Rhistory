import platform
import platform
# make sure python 3.9 is loaded
print(platform.python_version())
from spacetime.input.readData import read_data
from spacetime.scale.rasterAlign import raster_align
from spacetime.scale.rasterTrim import raster_trim
from spacetime.objects.fileObject import file_object
from spacetime.operations.cubeSmasher import cube_smasher
from spacetime.operations.cubeSmasher import cube_smasher
from spacetime.operations.makeCube import make_cube
from spacetime.operations.loadCube import load_cube
from spacetime.operations.cubeSmasher import cube_smasher
from spacetime.operations.makeCube import make_cube
from spacetime.operations.loadCube import load_cube
from spacetime.graphics.dataPlot import plot_cube
from spacetime.operations.cubeToDataframe import cube_to_dataframe
data = ["demoData/Carya_ovata_sim_disc_10km.tif", "demoData/Carya_ovata_sim_disc_1km.tif"]
ds = read_data(data)
scaledData = raster_align(ds)
trimmedData = raster_trim(scaledData)
yearObj = cube_time(start="2000", length=101, scale = "year")
# make cube
cube = make_cube(data = trimmedData, fileName = "yearCube.nc4", organizeFiles = "filestovar", organizeBands="bandstotime", timeObj = yearObj, varNames = ["10km", "1km"])
yearObj = cube_time(start="2000", length=101, scale = "year")
from spacetime.operations.time import cube_time, return_time, scale_time, select_time
# set up time vec for 101 years
yearObj = cube_time(start="2000", length=101, scale = "year")
# make cube
cube = make_cube(data = trimmedData, fileName = "yearCube.nc4", organizeFiles = "filestovar", organizeBands="bandstotime", timeObj = yearObj, varNames = ["10km", "1km"])
answer = cube_smasher(eq = "(a + 1000) ** 2", a = cube, c = 5, parentCube = cube)
answer.get_raster_data()
cube.get_raster_data()
newAnswer = cube_smasher(np.mean, a=[cube, answer], axis = 0, parentCube = cube)
import numpy as np
# write out the cube
newAnswer = cube_smasher(np.mean, a=[cube, answer], axis = 0, parentCube = cube)
from spacetime.operations.cubeSmasher import cube_smasher
answer = cube_smasher(eq = "(a + 1000) ** 2", a = cube, c = 5, parentCube = cube)
answer.get_raster_data()
newAnswer = cube_smasher(np.mean, parentCube = cube, a=[cube, answer], axis = 0)
t=plot_cube(cube=cube, variable="10km", type="space", summary = "mean", showPlot = True)
from spacetime.input.readData import read_data
from spacetime.input.readData import read_data
from spacetime.scale.rasterAlign import raster_align
from spacetime.scale.rasterTrim import raster_trim
from spacetime.objects.fileObject import file_object
from spacetime.objects.fileObject import file_object
from spacetime.operations.cubeSmasher import cube_smasher
from spacetime.operations.makeCube import make_cube
from spacetime.operations.loadCube import load_cube
from spacetime.graphics.dataPlot import plot_cube
from spacetime.operations.time import cube_time, return_time, scale_time, select_time
from spacetime.operations.cubeToDataframe import cube_to_dataframe
data = ["demoData/Carya_ovata_sim_disc_10km.tif", "demoData/Carya_ovata_sim_disc_1km.tif"]
ds = read_data(data)
scaledData = raster_align(ds)
trimmedData = raster_trim(scaledData)
yearObj = cube_time(start="2000", length=101, scale = "year")
# make cube
cube = make_cube(data = trimmedData, fileName = "yearCube.nc4", organizeFiles = "filestovar", organizeBands="bandstotime", timeObj = yearObj, varNames = ["10km", "1km"])
#load the reticulate package
library(reticulate)
# activate environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
reticulate::repl_python()
#load the reticulate package
library(reticulate)
# activate environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
reticulate::repl_python()
#load the reticulate package
library(reticulate)
# activate environment
use_condaenv(condaenv = "barra_python", conda = "auto", required = FALSE)
reticulate::repl_python()
